### ðŸ§  Core Insight

Even though `SameSite=Strict` blocks cookies on cross-site requests, **client-side redirects** initiated from within the target domain **do include cookies**. This allows a CSRF attack if you can trick the browser into navigating through a redirect path that ends in a sensitive action.

---

### ðŸ§ª Exploit Strategy

1. **Find a redirect vector**  
   The lab uses `/post/comment/confirmation?postId=...` which dynamically redirects based on `postId`.

2. **Inject a path traversal**  
   Example:  
   ```
   /post/comment/confirmation?postId=1/../../my-account
   ```
   This gets normalized to `/my-account`.

3. **Confirm cookies are sent**  
   The browser includes the session cookie in the redirected request, bypassing `SameSite=Strict`.

4. **Craft the final payload**  
   Redirect to a GET endpoint that changes the email:
   ```html
   <script>
     document.location = "https://YOUR-LAB-ID.web-security-academy.net/post/comment/confirmation?postId=1/../../my-account/change-email?email=pwned%40web-security-academy.net%26submit=1";
   </script>
   ```

   - `submit=1` triggers the form logic.
   - `%26` encodes `&` to keep it inside the `postId` parameter.

---

### ðŸ§¬ Symbolic Flow

This is a **ritual of redirection**â€”the attacker crafts a path that appears benign but unfolds into a deeper layer. The browser, like a trusting pilgrim, follows the trail and unknowingly performs the sacred act (email change) on behalf of the attacker.
